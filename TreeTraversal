#Tree Traversal 


#In-order: Left-root-right
#Pre-order: Root-left-right
#Post-order: Left-right-root

class Node:
    def __init__(self,key):
        self.left=None
        self.right=None
        self.value=key
        
        
def inorder(root):
    if(root.left):
        inorder(root.left)
    
    print(root.value)
    if(root.right):
        inorder(root.right)
        
def preorder(root):
    if root:
        print(root.value)
    if root.left:
        preorder(root.left)
    if root.right:
        preorder(root.right)
        
def postorder(root):
    if root.left:
        postorder(root.left)
    if root.right:
        postorder(root.right)
    print(root.value)

def printLevelOrder(root):
    h=height(root)
    
    for i in range(1,h+1):
        Levelorder(root,i)
        
def Levelorder(root,lev):
    if not root:
        return
    elif lev==1:
        print(root.value)
    elif lev>1:
        Levelorder(root.left, lev-1)
        Levelorder(root.right,lev-1)
        
def height(root):
    if root is None:
        return 0
    return 1+height(root.left)+height(root.right)
    
        
        
        
#Driver code:
root=Node(1)
root.left=Node(2)
root.left.left=Node(4)
root.left.right=Node(5)
root.right=Node(3)
print('in')

inorder(root)
print('pre')
preorder(root)

print('post')
postorder(root)

print("Level")
printLevelOrder(root)
        

    
    
    
